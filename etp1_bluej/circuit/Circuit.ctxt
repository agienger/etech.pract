#BlueJ class context
comment0.params=file
comment0.target=Circuit(java.io.File)
comment0.text=\r\n\ Folgende\ Schritte\ werden\ im\ Konstruktor\ des\ Circuits\ durchgef\u00FChrt\:\r\n\ <br>\ 1.\ Initialisieren\ der\ SignalListe\r\n\ <br>\ 2.\ Erzeugen\ des\ fileReaders\ als\ Instanz\ von\ {@link\ simulator.DateiLeser}\r\n\ <br>\ 3.\ In\ einer\ Schleife\ werden\ nun\ alle\ Zeilen\ der\ Eingabedatei\ ausgelesen\r\n\ <br>\ 4.\ Alle\ Zeilen\ die\ mit\ einem\ {@code\ \#}\ beginnen\ oder\ die\ nur\ whitespaces\ beinhalten\ werden\ ignoriert.\r\n\ <br>\ 5.\ Zeilen\ die\ mit\ dem\ keyword\ {@code\ input}\ beginnen,\ werden\ als\ input\ Signale\ in\ die\ Signalliste\ geschrieben.\r\n\ <br>\ 7.\ Zeilen\ die\ mit\ dem\ keyword\ {@code\ output}\ beginnen,\ werden\ als\ output\ Signale\ in\ die\ Signalliste\ geschrieben.\r\n\ <br>\ 8.\ Zeilen\ die\ mit\ dem\ keyword\ {@code\ signal}\ beginnen,\ werden\ als\ innere\ Signale\ in\ die\ Signalliste\ geschrieben.\r\n\ <br>\ 9.\ Zeilen\ die\ mit\ dem\ keyword\ {@code\ gater}\ beginnen,\ definieren\ ein\ Gatter.\ Die\ Zeile\ wird\ gesplittet\ an\ den\ \r\n\ whitespaces\ und\ das\ Ergebnis\ in\ ein\ Array\ geschrieben.\r\n\ <br>\ 9.1.\ Das\ zweite\ Element\ dieses\ Arrays\ ({@code\ gateData[1]})\ definiert\ den\ Namen\ des\ Gatters.\r\n\ <br>\ 9.2.\ Das\ dritte\ Element\ dieses\ Arrays\ ({@code\ gateData[2]})\ besteht\ aus\ einem\ Wort\ und\ einer\ Zahl.\r\n\ Das\ Wort\ beschreibt\ die\ Art\ des\ Gatters\ (z.B\ {@code\ AND}\ oder\ {@code\ FF}),\ die\ Zahl\ beschreibt\ \r\n\ die\ Anzahl\ der\ Eing\u00E4nge.\ Falls\ die\ Zahl\ fehlt,\ z.B.\ bei\ {@code\ BUF},\ ist\ die\ Anzahl\ der\ Eing\u00E4nge\ bereits\r\n\ die\ Art\ der\ Gatters\ definert.\ \r\n\ <br>\ 9.3.\ Das\ f\u00FCnfte\ Element\ dieses\ Arrays\ ({@code\ gateData[1]})\ definiert\ die\ delay\ Zeit\ dieses\ Gatters\r\n\ <br>\ 9.4.\ Schlie\u00DFlich\ wird\ ein\ Instanz\ des\ jeweiligen\ Gatters\ erzeugt,\ abh\u00E4ngig\ von\ der\ Art\ des\ Gatters.\r\n\ <br>\ 10.\ Alle\ anderen\ Zeilen\ defineren\ In-\ und\ Outputs\ eines\ Gatters,\ dies\ wird\ \r\n\ in\ der\ Methode\ {@link\ \#gateDefinition(String)}\ verarbeitet.\r\n\ \r\n\ @param\ file\ Die\ Datei,\ in\ welcher\ die\ Schaltkreis-Defintion\ gepflegt\ ist\ (.cir\ Datei)\r\n
comment1.params=line
comment1.target=void\ gateDefinition(java.lang.String)
comment1.text=\r\n\ Die\ Gatter\ Definition\ folgt\ dem\ Pattern\ [gatter].[in/out9\=[signal].\ Dies\ bilden\ wir\ in\r\n\ dem\ regul\u00E4ren\ Ausdruck\ {@code\ regex}\ ab,\ wo\ wir\ entsprechend\ 3\ Gruppen\ definieren.\r\n\ <br>\ Die\ erste\ Gruppe\ beinhaltet\ den\ Gatternamen\r\n\ <br>\ Bei\ der\ zweiten\ Gruppe\ muss\ man\ mehrere\ Fallunterscheidungen\ machen\:\ Beginnt\ sie\ mit\ {@code\ i}\ \r\n\ gefolgt\ von\ einer\ Zahl\ n,\ so\ bezeichnet\ dies\ das\ n-te\ Eingangssignal\ des\ Gatters.\r\n\ <br>\ Besteht\ sie\ aus\ einem\ {@code\ o}\ oder\ {@code\ q},\ so\ bezeichnet\ dies\ das\ Ausgangssignal\ des\ Gatters.\r\n\ {@code\ q}\ wird\ f\u00FCr\ ein\ {@code\ LATCH}\ bzw.\ \ Gatter\ verwendet.\r\n\ <br>\ Besteht\ sie\ aus\ einem\ {@code\ nq},\ so\ bezeichnet\ dies\ das\ negierte\ Ausgangssignal\ des\ {@code\ FF}\ Gatters.\r\n\ <br>\ Besteht\ sie\ aus\ einem\ {@code\ e}\ oder\ einem\ {@code\ c},\ so\ bezeichnet\ dies\ das\ "enable"\ bzw.\ \r\n\ "clock"\ Signal\ eines\ {@code\ LATCH}\ bzw.\ {@code\ FF}\ Gatters.\r\n\ <br>\ Besteht\ sie\ aus\ einem\ {@code\ d},\ so\ bezeichnet\ dies\ das\ Datensignal\ eines\r\n\ {@code\ LATCH}\ bzw.\ {@code\ FF}\ Gatters.\r\n\ <br>\ In\ allen\ anderen\ F\u00E4llen\ wird\ eine\ Exception\ geworfen,\ das\ eine\ solche\ property\ nicht\ bekannt\ ist.\r\n\ <br>\r\n\ <br>\ Die\ entsprechenden\ Signal\ werden\ dann\ \u00FCber\ die\ Methoden\ {@code\ setOutput()},\ {@code\ setNegOutput}\ \r\n\ (bei\ {@code\ FF})\ bzw.\ {@code\ setInput}\ der\ Gatter\ gesetzt.\r\n\ <br>\r\n\ @param\ line\ Zeile\ der\ Eingabedatei\ (ohne\ Whitespaces),\ \r\n\ in\ der\ die\ In-\ und\ Output\ Signale\ eines\ Gatters\ definiert\ sind.\r\n
comment2.params=line\ keyword
comment2.target=java.util.List\ getInformationFromLine(java.lang.String,\ java.lang.String)
comment2.text=\r\n\ Hilfsmethode,\ welche\ f\u00FCr\ ein\ Signalzeile\ angewendet\ wird.\ Es\ werden\ in\ der\ Zeile\ zun\u00E4chst\ \r\n\ sas\ keyword\ und\ die\ whitespaces\ gel\u00F6scht\ und\ dann\ an\ dem\ Kommas\ gesplittet\ und\ in\ eine\ \r\n\ Liste\ von\ Signalnamen\ geschrieben.\r\n\ @param\ line\ Zeile\ der\ Eingabedatei\r\n\ @param\ keyword\ Gibt\ an\ ob,\ es\ sich\ um\ InPut,\ Output\ oder\ inneres\ Signal\ handelt.\r\n\ @return\ Liste\ der\ Signalnamen\r\n
numComments=3
