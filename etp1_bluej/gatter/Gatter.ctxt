#BlueJ class context
comment0.params=anzahl\ wTime
comment0.target=Gatter(int,\ int)
comment0.text=\r\n\ Konstruktor\ der\ Klasse\ Gatter,\ initialisiert\ ein\ Signal\ Array\ mit\ {@code\ anzahl}\r\n\ Feldern\ und\ Wartezeit\ {@code\ wTime}.\r\n\ \r\n\ @param\ anzahl\ Anzahl\ der\ Eing\u00E4nge\r\n\ @param\ wTime\ Delay\ Time\ des\ Gatters\r\n
comment1.params=inputNummer\ inputSignal
comment1.target=void\ setInput(int,\ circuit.Signal)
comment1.text=\r\n\ Beim\ Schaltungsaufbau\ wird\ hier\ das\ n-te\ Eingangssignal\r\n\ inputSignal\ definiert.\ Au\u00DFerdem\ weist\ die\ Methode\ diesem\ Signal\ dieses\ Gatter\ als\r\n\ Ziel\ zu.\r\n\ \r\n\ @param\ inputNummer\ Nummer\ des\ Eingangs\r\n\ @param\ inputSignal\ Input\ Signal\r\n
comment2.params=s
comment2.target=void\ setOutput(circuit.Signal)
comment2.text=\r\n\ Beim\ Schaltungsaufbau\ wird\ hier\ das\ Ausgangssignal\ signal\ gesetzt.\r\n\ \r\n\ @param\ s\ Ausgangssignal\r\n
comment3.params=
comment3.target=void\ setOutputValue()
comment3.text=\r\n\ Berechnet\ den\ Wert\ des\ Ausgangssignals.\ Wenn\ die\ Eventque\ noch\ nicht\ gestartet\ wurde\ (Einschwingphase),\r\n\ So\ wird\ nur\ dann\ ein\ neues\ Event\ erzeugt,\ wenn\ sich\ der\ Wett\ des\ Signals\ ge\u00E4ndert\ hat.\r\n\ \r\n\ \r\n
comment4.params=
comment4.target=circuit.Signal[]\ getInputSignalArray()
comment4.text=\r\n\ @return\ Das\ Array\ der\ Eingsngssignalen.\r\n
comment5.params=
comment5.target=boolean\ calculateOutputValue()
comment5.text=\r\n\ Abstrakte\ Methode\ der\ Gatter-spezifischen\ Berechnung\ das\ Ausgangssignal\ des\ Gatters.\r\n\ \r\n\ @return\ the\ output\ value\r\n
comment6.params=
comment6.target=boolean\ getLastCalculatedValue()
comment7.params=
comment7.target=void\ recalculate()
comment7.text=\r\n\ Diese\ Methode\ berechnet\ alle\ Gatter\ der\ Gatterliste\ neu\ und\ \r\n
comment8.params=
comment8.target=circuit.Signal\ getOutput()
comment9.params=
comment9.target=int\ getWaitTime()
numComments=10
